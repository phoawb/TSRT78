%% Get signal from file and plot data
fs = 8000;
fn = 4000;

[whistle, fSamp] = audioread('data/whistle.wav');    
y = whistle(fSamp*4:fSamp*6-1);             % the best 2 seconds
nSamp = length(y);                          % number of samples
t = (0:nSamp - 1) / fs;                     % time vector in seconds

figure(1);clf;
plot(t, y);
xlabel('time in seconds')
ylabel('recorded signal')

%% Fourier transform of the signal
N = 16000;
Y = fft(y);                                 % FFT of the signal
Ysamp = length(Y);                          % Length of FFT vector
ff = (0:N-1)*(fSamp/N);                     % frequency vector

figure;
plot(ff, abs(Y));

% Filter around the dominant frequency
[BBand, ABand] = butter(7, [1100*2/fSamp 1200*2/fSamp], "bandpass");

y_BP = filtfilt(BBand, ABand, y);           % apply BP filter to signal
Y_BP = fft(y_BP,N);                         % FFT of the filtered signal

% Compensate for loss of amplitude for butter
[~, idx] = max(Y);
Y_max = Y(idx);
[~, idxBP] = max(Y_BP);
Y_BP_max = Y_BP(idxBP);
ratio = Y_max / Y_BP_max;
Y_BP = Y_BP * ratio;

% Energy in the time domain
E_tot_t = sum(abs(y).^2);
E_dom_t = sum(abs(ifft(Y_BP)).^2);
purity_t = (1 - E_dom_t/E_tot_t);           % Harmonic distortion

% Energy in the frequency domain
[~, idy_lowmax] = max(abs(Y(1:Ysamp/2)));
[~, idy_highmax] = max(abs(Y(Ysamp/2+1:Ysamp)));

% Number of frequencies around peak to add
b = 15;

band_pass = zeros(1, N); 
band_pass(idy_lowmax-b:idy_lowmax+b) = 1;
band_pass(idy_highmax-b:idy_highmax+b) = 1;

Y_BP= band_pass'.*Y;

E_tot_f = 1/N*sum(abs(Y).^2);
E_dom_f = 1/N*sum(abs(Y_BP).^2);
purity_f = (1 - E_dom_f/E_tot_f);           % Harmonic distortion

%% AR (parametric)

% AR model of order 2, least squares,
ar_model = ar(y, 2, 'ls', 'Ts', 1/fs);
A = ar_model.A;
figure;
zplane(1,A)
present(ar_model)

r = roots(A);
distance_1 = 1- norm(r(1))
distance_2 = 1- norm(r(2))

% Alrnative method
[R,P,K] = residue(1,A); 
dis1 = 1-norm(P(1)) 
dis2 = 1-norm(P(2)) 

%% PSD (non-parametric)

non_param_model = etfe(y); % Periodogram estimation
non_param_model = etfe(y, 100, [], ''); % 
figure; bode(ar_model, 'r', non_param_model, 'b');
legend('AR-model', 'Periodogram');

